Implementation Plans

1) Create the objects, set up scene
2) Create local illumination
3) Create reflection rays


--- 1) ---


currently the 'pokeball problem'
now i noticed that specular term is showing up on the 'opposite' side that should have no lighting at all
- fixed both of these problems by allowing shape to 'occlude' itself, but moving the ray that goes
from the intersection point on the sphere to the light source one unit away from the object before
doing occlusion calculation


need to add reflection, add planes, add superclass for them both.

http://www.cplusplus.com/doc/tutorial/polymorphism/

---------------------------------------------------------------------------------------------------------------------

My sphere appears to be the same size whether it is very near to the screen or very far from it. Is this expected?

How do we check if there is an object between the object and the light source? Diffuse light and specular light
don't seem to do this on their own...

In diffuse light calculation, L13 slide 25, should L and N be unit vectors?


how do we create the lights? Can we use openGL?
how do we create the infinite planes?
how do we create the objects? if they are openGL objects, is there a way of assigning them texture (coefficients of
ambient, diffuse, specular reflection, and level of reflectance)?

answer: we can use the openGL objects.
general algorithm question: how do we know which angle we should examine when we are doing reflection?
for example:

LIGHT-\1
      --\
        --\
          --\
eyeport ---> O

how would we know to trace the ray back to the light source rather than back to the eyeport?
should a given ray that reflects off a diffuse surface turn into many rays, as suggested by
slide 10 in lecture15?

This is answered by local illumination. Every point on every object's local illumination is calculated before
the rays are even traced. Illumination rays are different from reflection rays. Reflection rays are calculated
via the angle.
